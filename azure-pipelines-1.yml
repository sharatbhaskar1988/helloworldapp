trigger:
- '*'

pool:
 vmImage: ubuntu-latest

stages:
- stage: "BuildStage"
  jobs:
  - job: "BuildJob"
    steps:
    - task: DotNetCoreCLI@2
      displayName: "restore"
      inputs:
          command: 'restore'
          projects: '**/*.csproj'
          feedsToUse: 'select'
    - task: DotNetCoreCLI@2
      displayName: "build"
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
    
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/*UITests.csproj'
        arguments: '-c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: false
      
#     - task: DotNetCoreCLI@2
#       displayName: 'Run unit tests - $(buildConfiguration)'
#       inputs:
#         command: 'test'
#         projects: '**/*Test.csproj'
#         arguments: '--no-build --configuration $(buildConfiguration) /p:threshold=80 /p:thresholdType=line
# /p:thresholdStat=total /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./Test
# Results/Coverage/'
#         publishTestResults: true
    # - task: PublishCodeCoverageResults@2
    #   inputs:
    #    summaryFileLocation: '$(Pipeline.Workspace)/**/coverage.cobertura.xml'
    #   condition: 'succeededOrFailed()'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        projects: '**/*Web.csproj'
        publishWebProjects: true
        arguments: '-c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)'
        artifact: 'drop'
        publishLocation: 'pipeline'

- stage: "DeployToDev"
  dependsOn: "BuildStage"
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/dev')
  jobs:
  - deployment: 
    pool:
      vmImage: ubuntu-latest
    environment: "Development"
    strategy:
     runOnce:
       deploy:
        steps:
        - task: AzureRmWebAppDeployment@4
          inputs:
            ConnectionType: 'AzureRM'
            azureSubscription: 'DSS7'
            appType: 'webApp'
            WebAppName: 'hwap-dev'
            packageForLinux: '$(Pipeline.Workspace)/**/*.zip'

- stage: "DeployToQa"
  dependsOn: "DeployToDev"
  jobs:
  - deployment: 
    pool:
      vmImage: ubuntu-latest
    environment: "QA"
    strategy:
     runOnce:
       deploy:
        steps:
        - task: AzureRmWebAppDeployment@4
          inputs:
            ConnectionType: 'AzureRM'
            azureSubscription: 'DSS7'
            appType: 'webApp'
            WebAppName: 'hwap-qa'
            packageForLinux: '$(Pipeline.Workspace)/**/*.zip'

- stage: "DeployToProd"
  dependsOn: "BuildStage"
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  jobs:
  - deployment: 
    pool:
      vmImage: ubuntu-latest
    environment: "Production"
    strategy:
     runOnce:
       deploy:
        steps:
        - task: AzureRmWebAppDeployment@4
          inputs:
            ConnectionType: 'AzureRM'
            azureSubscription: 'DSS7'
            appType: 'webApp'
            WebAppName: 'hwap-prod'
            deployToSlotOrASE: true
            ResourceGroupName: 'helloworldapp'
            SlotName: 'staging'
            packageForLinux: '$(Pipeline.Workspace)/**/*.zip'
        - task: AzureAppServiceManage@0
          inputs:
            azureSubscription: 'DSS7'
            Action: 'Swap Slots'
            WebAppName: 'hwaa-prod'
            ResourceGroupName: 'helloworldapp'
            SourceSlot: 'staging'
  
       