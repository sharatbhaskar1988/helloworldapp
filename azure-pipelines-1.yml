trigger:
- none

pool:
 vmImage: windows-latest

stages:
- stage: "BuildStage"
  jobs:
  - job: "BuildJob"
    steps:
      - task: DotNetCoreCLI@2
        displayName: "DotnetRestore"
        inputs:
          command: 'restore'
          projects: '**/HelloWorldApp.Web.csproj'
          feedsToUse: 'select'
      
      - task: DotNetCoreCLI@2
        displayName: "DotnetBuild"
        inputs:
          command: 'build'
          projects: '**/HelloWorldApp.Web.csproj'
          arguments: '-c $(BuildConfiguration)'
      
      - task: DotNetCoreCLI@2
        displayName: 'UI Tests Publish'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '**/HelloWorldApp.UITests.csproj'
          arguments: '-c $(BuildConfiguration) -o $(Pipeline.Workspace)'
          zipAfterPublish: false
      
      - task: CopyFiles@2
        displayName: 'Copying UI Files'
        inputs:
          SourceFolder: '$(Pipeline.Workspace)'
          Contents: '**/HelloWorldApp.UITests\bin\Release\net7.0\'
          TargetFolder: '$(Pipeline.Workspace)\HelloWorldApp.UITests'
      
      # - task: DotNetCoreCLI@2
      #   displayName: 'Unit Tests - $(BuildConfiguration)'
      #   inputs:
      #     command: 'test'
      #     projects: '**/HelloWorldApp.Tests.csproj'
      #     arguments: '--no-build -c $(BuildConfiguration) /p:threshold=7 /p:thresholdType=line /p:thresholdStat=total /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/Coverage/'
      
      # - task: PublishCodeCoverageResults@2
      #   inputs:
      #     summaryFileLocation: '$(Pipeline.Workspace)/**/coverage.cobertura.xml'
      #   condition: 'succeededOrFailed()'
      
      - task: DotNetCoreCLI@2
        displayName: "DotnetPublish"
        inputs:
          command: 'publish'
          publishWebProjects: true
          arguments: '-c $(BuildConfiguration) -o $(Pipeline.Workspace)'
      
      - task: PublishPipelineArtifact@1
        displayName: "Publishing Pipeline Artifacts"
        inputs:
          targetPath: '$(Pipeline.Workspace)'
          artifact: 'drop'
          publishLocation: 'pipeline'